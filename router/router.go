package router

import (
	"net/http"

	"github.com/gin-contrib/pprof"
	"github.com/gin-gonic/gin"

	"github.com/swaggo/gin-swagger" //nolint: goimports
	"github.com/swaggo/gin-swagger/swaggerFiles"

	// import swagger handler
	_ "github.com/1024casts/snake/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/1024casts/snake/handler/user"
	"github.com/1024casts/snake/router/middleware"
)

// Load loads the middlewares, routes, handlers.
func Load(g *gin.Engine, mw ...gin.HandlerFunc) *gin.Engine {
	// Middlewares.
	g.Use(gin.Recovery())
	g.Use(middleware.NoCache)
	g.Use(middleware.Options)
	g.Use(middleware.Secure)
	g.Use(mw...)
	// 404 Handler.
	g.NoRoute(func(c *gin.Context) {
		c.String(http.StatusNotFound, "The incorrect API route.")
	})

	// 静态资源，主要是图片
	g.Static("/static", "./static")

	// swagger api docs
	g.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// pprof router
	pprof.Register(g)

	// api for authentication functionalities
	g.POST("/v1/login", user.Login)
	g.GET("/v1/vcode", user.VCode)

	// The user handlers, requiring authentication
	g.GET("/v1/users/:id", user.Get)
	u := g.Group("/v1/users")
	u.Use(middleware.AuthMiddleware())
	{
		u.PUT("/:id", user.Update)
	}

	return g
}
